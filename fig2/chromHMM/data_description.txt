1. HEK293 data source
ChIP-seq	source	assembly	dataType
H3K4me1	https://www.encodeproject.org/experiments/ENCSR000FCG/	hg38	ENCFF717JWL	
H3K4me3	https://www.encodeproject.org/experiments/ENCSR000DTU/	hg38	ENCFF342FTF
H3K27me3	http://chip-atlas.org/view?id=DRX013192	hg19	bigWig	https://www.ncbi.nlm.nih.gov/pubmed/25034687
H3K9me3	https://www.encodeproject.org/experiments/ENCSR000FCJ/	hg38	ENCFF902RQI
H3K36me3	https://www.encodeproject.org/experiments/ENCSR910LIE/	hg38	ENCFF321LUP

2. Convert bigWig to bedgraphs
~/Work/bin/bigWigToBedGraph

(Optional, Lift over H3K27me3 data to hg38, and sort bedgraph file)
~/Work/tools/liftOver/liftOver H3K27me3.bg ~/Work/tools/liftOver/hg19ToHg38.over.chain.gz H3K27me3.hg38.bg unmapped
sort -k1,1 -k2,2n H3K27me3.hg38.bg > H3K27me3.hg38.sorted.bg

4. Make into 200bp bins
awk 'NR==1{chr=$1; pos=int($2/200);}
	$1==chr && int($2/200)==pos {
		len = len + $3 - $2;
		s = s + $4 * ($3 - $2);
		next }
	{
		if(len>0) print chr"\t"pos*200"\t"(pos+1)*200"\t"s/len;
		chr=$1; pos=int($2/200); len= $3-$2; s = $4*($3-$2);
	}' 1.bg > H3K4me3.bg

5. Force the bg files to a total of 2 billion reads
awk '{print $1"\t"$2"\t"$3"\t"int($4*2000/9.2)}' ratiobg/H3K4me1.bg > pseudoreadcountbg/H3K4me1.bg
awk '{print $1"\t"$2"\t"$3"\t"int($4*2000/8.3)}' ratiobg/H3K4me3.bg > pseudoreadcountbg/H3K4me3.bg
awk '{print $1"\t"$2"\t"$3"\t"int($4*2000/9.9)}' ratiobg/H3K9me3.bg > pseudoreadcountbg/H3K9me3.bg
awk '{print $1"\t"$2"\t"$3"\t"int($4*2000/0.32)}' ratiobg/H3K27me3.bg > pseudoreadcountbg/H3K27me3.bg
awk '{print $1"\t"$2"\t"$3"\t"int($4*2000/9.9)}' ratiobg/H3K36me3.bg > pseudoreadcountbg/H3K36me3.bg

6. Merge the bg files
~/Work/labuser/sl2665/fig3/chromHMM/ChIP-seq$ bedtools unionbedg -i H3K4me1.bg H3K4me3.bg H3K9me3.bg H3K27me3.bg H3K36me3.bg > H3merge.bg

7. Make a whole genome interval and readcount overlap
bedtools makewindows -g chrNameLength.txt -w 200 > windows.bed
bedtools intersect -a windows.bed -b H3merge.bg -loj > H3mergeall.bed

8. Split by chr H3K27me3 has background read count of 12, so subtract the read.
awk '$2==0{ print "HEK293\t"$1"\nH3K27me3\tH3K36me3\tH3K4me1\tH3K4me3\tH3K9me3">"chromHMMinput/_signal."$1".txt" }
	{a=$10-128;if(a<0) a=0;print int((a)/10)"\t"int((0+$11)/10)"\t"int((0+$7)/10)"\t"int((0+$8)/10)"\t"int((0+$9)/10) > "chromHMMinput/_signal."$1".txt"}' pseudoreadcountbg/H3mergeall.bed


9. Use ChromHMM tool to binarize the input https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5945550/
java -mx4G -jar ~/Work/tools/ChromHMM/ChromHMM.jar BinarizeSignal chromHMMinput chromHMMbinarized

10. Use pre-built ChromHMM model from the epigenome roadmap to segment the HEK293 genome
java -mx4G -jar ~/Work/tools/ChromHMM/ChromHMM.jar MakeSegmentation chromHMMepiRoadmapModel/model_15_coreMarks.txt chromHMMbinarized HEKsegmentation 

11. Make browser compatible files
java -mx4G -jar ~/Work/tools/ChromHMM/ChromHMM.jar MakeBrowserFiles -c chromHMMepiRoadmapModel/colormap_15_coreMarks.tab -m chromHMMepiRoadmapModel/labelmap_15_coreMarks.tab HEKsegmentation/HEK293_15_segments.bed HEK293_chromHMM HEK293_chromHMM

